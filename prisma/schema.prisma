generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String   @unique
  hash      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  method    String
  url       String
  status    Int
  duration  Int
  userName  String?
  userId    Int?
  userRole  String?
  ip        String?
  createdAt DateTime @default(now())
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  hash                String
  firstName           String?
  lastName            String?
  role                String?
  phoneCode           String?
  phoneNumber         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userCars            UserCars[]
  passwordResetTokens PasswordResetToken[]
  AllCarsList         AllCarsList[]

  @@map("users")
}


model UserCars {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  brand         String?
  model         String?
  year          Int
  price         Int
  mileage       Int
  fuel          String?
  condition     String?
  color         String?
  ban           String?
  location      String?
  engine        String?
  gearbox       String?
  description   String?
  features      String[]
  status        String?
  images        Carimages[]  @relation("UserCarImages")
  userId        Int
  user          User         @relation(fields: [userId], references: [id])

  allCarsListId Int?         @unique
  allCar        AllCarsList? @relation("UserCarToAllCar", fields: [allCarsListId], references: [id])

  @@map("userJournal")
}

model AllCarsList {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  brand     String?
  model     String?
  year      Int
  price     Int
  mileage   Int
  fuel      String?
  condition String?
  color     String?
  ban       String?
  location  String?
  engine    String?
  gearbox   String?
  description String?
  features  String[]
  status    String?
  images    Carimages[] @relation("AllCarImages")

  userCar   UserCars? @relation("UserCarToAllCar")

  userId   Int?
  user     User?      @relation(fields: [userId], references: [id])

  @@map("allCarsList")
}


model Carimages {
  id        Int          @id @default(autoincrement())
  url       String
  allCarId  Int?
  allCar    AllCarsList? @relation("AllCarImages", fields: [allCarId], references: [id])
  userCarId Int?
  userCar   UserCars?    @relation("UserCarImages", fields: [userCarId], references: [id])

  @@map("carImages")
}

model PasswordResetToken {
  token     String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  createdAt DateTime @default(now())
}
